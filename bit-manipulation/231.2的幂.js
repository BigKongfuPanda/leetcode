/*
https://leetcode-cn.com/problems/power-of-two/
位运算
*/

/**
 * @param {number} n
 * @return {boolean}
 */
// 暴力循环
var isPowerOfTwo = function (n) {
  let v = 1;
  while (v < n) {
    v *= 2
  }
  return v === n
};

/*
一个数n是2的幂，当且仅当n是正整数，并且n的二进制标识中仅包含1个1
比如：
2^0: 000001
2^1: 000010
2^2: 000100
2^3: 001000
...
利用这个特性我们可以通过两种方式判断是否为这样的结构
1) n - 1,这样会消除掉仅存的1，然后判断n & (n - 1) = 0
比如上述例子
2^0: n: 000001 (n - 1): 000000
2^1: n: 000010 (n - 1): 000001
2^2: n: 000100 (n - 1): 000010
2^3: n: 001000 (n - 1): 000100

2) n & (-n) = n
2^0: n: 000001 -n: 111111
2^1: n: 000010 -n: 111110
2^2: n: 000100 -n: 111100
2^3: n: 001000 -n: 111000

如何求-n，
比如000010，-n: -000010
先求反码：111101：实际为-3
求-n的话需要在反码的基础上+1：111110
111110 & 000010 = 000010 即 -n & n = n
*/
var isPowerOfTwo = function (n) {
  return n > 0 && (n & (n - 1)) === 0
};


var isPowerOfTwo = function (n) {
  return n > 0 && (n & (-n)) === n
};